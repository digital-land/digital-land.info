name: Deploy

on:
  push:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: The environment to deploy.

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - run: make init
      - run: make lint

  test:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgis/postgis:14-master
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATASETTE_URL: https://datasette.digital-land.info
      DATA_FILE_URL: https://data.digital-land.info
      READ_DATABASE_URL: postgresql://postgres:postgres@localhost/digital_land_test
      WRITE_DATABASE_URL: postgresql://postgres:postgres@localhost/digital_land_test
      ENVIRONMENT: development
      PGPASSWORD: postgres
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - run: make init

      - name: Setup database
        run: |
          psql -h localhost -c "CREATE DATABASE digital_land_test WITH TEMPLATE postgres" -U postgres

      - name: Unit Tests
        run: |
          make test-unit
          echo "## Unit Tests" >> $GITHUB_STEP_SUMMARY
          cat unit-tests.md >> $GITHUB_STEP_SUMMARY

      - name: Integration Tests
        run: |
          make test-integration
          echo "## Integration Tests" >> $GITHUB_STEP_SUMMARY
          cat integration-tests.md >> $GITHUB_STEP_SUMMARY

      - name: Acceptance Tests
        run: |
          make test-acceptance
          echo "## Acceptance Tests" >> $GITHUB_STEP_SUMMARY
          cat acceptance-tests.md >> $GITHUB_STEP_SUMMARY

      - name: Accessibility Tests
        run: |
          make test-accessibility
          echo "## Accessibility Tests" >> $GITHUB_STEP_SUMMARY
          cat accessibility-tests.md >> $GITHUB_STEP_SUMMARY

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  detect-environments:
    runs-on: ubuntu-latest
    needs: [test, lint]
    outputs:
      environments: ${{ steps.environments.outputs.result }}
    if: github.ref_name == 'main'
    steps:
      - uses: actions/github-script@v6
        id: environments
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: json
          script: |
            if (context.payload?.inputs?.environment) return [context.payload?.inputs?.environment];
            const {data: {environments}} =
              await github.request(`GET /repos/${process.env.GITHUB_REPOSITORY}/environments`);
            return environments.map(e => e.name)

  deploy:
    runs-on: ubuntu-latest
    needs: [detect-environments]
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.detect-environments.outputs.environments) }}
    environment: ${{ matrix.environment }}
    env:
      DOCKER_REPO: ${{ secrets.DEPLOY_DOCKER_REPOSITORY }}
    if: github.ref_name == 'main'
    steps:
      - uses: actions/checkout@v4

      - id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          sudo apt-get update
          sudo apt-get install -y rsync

      - uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - run: |
          npm install
          make frontend-all

      - uses: aws-actions/amazon-ecr-login@v1

      - run: docker pull $DOCKER_REPO:latest || echo "no current latest image"

      - run: docker build -t $DOCKER_REPO:${{ steps.vars.outputs.sha_short }} .

      - run: docker tag $DOCKER_REPO:${{ steps.vars.outputs.sha_short }} $DOCKER_REPO:latest

      - run: docker push $DOCKER_REPO:${{ steps.vars.outputs.sha_short }}

      - run: docker push $DOCKER_REPO:latest
