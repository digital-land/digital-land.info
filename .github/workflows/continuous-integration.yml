name: Continuous Integration
on:
  push:
  workflow_dispatch:

jobs:

  runner-job:

    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgis/postgis:13-master
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        command: |
          psql -c "CREATE DATABASE digital_land_test WITH TEMPLATE postgres"
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Make Init
      run: |
        make init

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DL_WEB }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DL_WEB }}
        aws-region: eu-west-2

    - name: Lint
      run: |
        make lint

    - name: Test
      run: |
        make test
        make test-acceptance
      env:
        DATASETTE_URL:  https://datasette.digital-land.info
        S3_COLLECTION_BUCKET: https://collection-dataset.s3.eu-west-2.amazonaws.com
        READ_DATABASE_URL: postgresql://postgres:postgres@localhost/digital_land
        WRITE_DATABASE_URL: postgresql://postgres:postgres@localhost/digital_land

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and tag
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dl-web
        IMAGE_TAG: latest
      run: |
        docker build --target production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

    - name: Push the Amazon ECR
      if: ${{ github.ref == 'refs/heads/main' }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dl-web
        IMAGE_TAG: latest
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Restart dl-web-service
      if: ${{ github.ref == 'refs/heads/main' }}
      run: |
        aws ecs update-service --force-new-deployment --service development-ecs-service --cluster development-ecs-cluster
