import json
import os
from functools import lru_cache
from typing import Optional

from dotenv import load_dotenv
from pydantic import BaseSettings, PostgresDsn, HttpUrl

load_dotenv()


class Settings(BaseSettings):
    S3_HOISTED_BUCKET: HttpUrl
    S3_COLLECTION_BUCKET: HttpUrl
    WRITE_DATABASE_URL: PostgresDsn
    READ_DATABASE_URL: PostgresDsn
    SENTRY_DSN: Optional[str] = None
    ENVIRONMENT: str


@lru_cache()
def get_settings() -> Settings:
    print("Parsing settings...")
    settings_overrides = {}
    # Structure of VCAP_SERVICES:
    # https://docs.cloud.service.gov.uk/deploying_apps.html#system-provided-environment-variables
    if "VCAP_SERVICES" in os.environ:
        environment = os.environ.get("ENVIRONMENT", "")
        print("Parsing VCAP_SERVICES environment variable....")
        vcap_services_obj = json.loads(os.environ["VCAP_SERVICES"])
        s3_bucket_config = vcap_services_obj.get("aws-s3-bucket", [])
        for bucket in s3_bucket_config:
            if (
                bucket.get("name", "")
                == f"{environment}-digital-land-collection-dataset"
            ):
                # gov.uk PaaS prescribes the following template for generating S3 URLS
                # https://docs.cloud.service.gov.uk/deploying_services/s3/#access-objects-in-a-public-aws-s3-bucket
                print(
                    f"Found {environment}-digital-land-collection-dataset in VCAP_SERVICES['aws-s3-bucket'], parsing..."
                )
                generated_bucket_name = bucket.get("credentials", {}).get("bucket_name")
                if not generated_bucket_name:
                    raise Exception(
                        "Collection bucket found in VCAP_SERVICES, but autogenerated bucket name is missing"
                    )
                else:
                    settings_overrides[
                        "S3_COLLECTION_BUCKET"
                    ] = f"https://{generated_bucket_name}.s3.amazonaws.com"
            elif (
                bucket.get("name", "")
                == f"{environment}-digital-land-collection-dataset-hoisted"
            ):
                print(
                    f"Found {environment}-digital-land-collection-dataset-hoisted in VCAP_SERVICES['aws-s3-bucket']"
                    ", parsing..."
                )
                # gov.uk PaaS prescribes the following template for generating S3 URLS
                # https://docs.cloud.service.gov.uk/deploying_services/s3/#access-objects-in-a-public-aws-s3-bucket
                generated_bucket_name = bucket.get("credentials", {}).get("bucket_name")
                if not generated_bucket_name:
                    raise Exception(
                        "Hoisted collection bucket found in VCAP_SERVICES, but autogenerated bucket name is missing"
                    )
                else:
                    settings_overrides[
                        "S3_HOISTED_BUCKET"
                    ] = f"https://{generated_bucket_name}.s3.amazonaws.com"

    # Gov.uk PaaS provides a URL to the postgres instance it provisions via DATABASE_URL
    # See https://docs.cloud.service.gov.uk/deploying_services/postgresql/#connect-to-a-postgresql-service-from-your-app
    if "DATABASE_URL" in os.environ:
        database_url = os.environ["DATABASE_URL"].replace(
            "postgres://", "postgresql://", 1
        )
        settings_overrides.update(
            dict(READ_DATABASE_URL=database_url, WRITE_DATABASE_URL=database_url)
        )
    return Settings(**settings_overrides)
